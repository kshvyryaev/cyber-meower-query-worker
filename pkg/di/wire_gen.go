// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kshvyryaev/cyber-meower-query-worker/pkg"
	"github.com/kshvyryaev/cyber-meower-query-worker/pkg/event"
	"github.com/kshvyryaev/cyber-meower-query-worker/pkg/search"
	"github.com/kshvyryaev/cyber-meower-query-worker/pkg/worker"
)

// Injectors from wire.go:

func InitializeMeowSeederWorker() (*worker.MeowSeederWorker, func(), error) {
	config, err := pkg.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	encodedConn, cleanup, err := event.ProvideNats(config)
	if err != nil {
		return nil, nil, err
	}
	natsMeowEventReceiver, cleanup2, err := event.ProvideNatsMeowEventReceiver(encodedConn)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := search.ProvideElastic(config)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	elasticMeowRepository := search.ProvideElasticMeowRepository(client)
	logger, cleanup3, err := pkg.ProvideZap()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	meowSeederWorker := worker.ProvideMeowSeederWorker(natsMeowEventReceiver, elasticMeowRepository, logger)
	return meowSeederWorker, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
